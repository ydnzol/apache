<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<modulesynopsis>

<name>mod_mime</name>
<description>Associates the requested filename's extensions
    with the file's behavior (handlers and filters)
    and content (mime-type, language, character set and
    encoding)</description>
<status>Base</status>
<sourcefile>mod_mime.c</sourcefile>
<identifier>mime_module</identifier>

<summary>
    <p>This module is used to associate various bits of "meta
    information" with files by their filename extensions. This
    information relates the filename of the document to it's
    mime-type, language, character set and encoding. This
    information is sent to the browser, and participates in content
    negotiation, so the user's preferences are respected when
    choosing one of several possible files to serve. See
    <module>mod_negotiation</module> for more information
    about content negotiation. </p>

    <p>The directives <directive
    module="mod_mime">AddCharset</directive>, <directive
    module="mod_mime">AddEncoding</directive>, <directive
    module="mod_mime">AddLanguage</directive> and <directive
    module="mod_mime">AddType</directive> are all used to map file
    extensions onto the meta-information for that file. Respectively
    they set the character set, content-encoding, content-language,
    and MIME-type (content-type) of documents.  The directive <directive
    module="mod_mime">TypesConfig</directive> is used to specify a
    file which also maps extensions onto MIME types. </p>

    <p>In addition, <module>mod_mime</module> may define the <a
    href="../handler.html">handler</a> and <a
    href="../filter.html">filters</a> that originate and process
    content.  The directives <directive
    module="mod_mime">AddHandler</directive>, <directive
    module="mod_mime">AddOutputFilter</directive>, and <directive
    module="mod_mime">AddInputFilter</directive> control the modules
    or scripts that serve the document.  The <directive
    module="mod_mime">MultiviewsMatch</directive> directive allows
    <module>mod_negotiation</module> to consider these file extensions
    to be included when testing Multiviews matches.</p>

    <p>While <module>mod_mime</module> associates meta-information
    with filename extensions, the <module>core</module> server
    provides directives that are used to associate all the files in a
    given container (<em>e.g.</em>, <directive type="section"
    module="core">location</directive>, <directive type="section"
    module="core">directory</directive>, or <directive type="section"
    module="core">Files</directive>) with particular
    meta-information. These directives include <directive
    module="core">ForceType</directive>, <directive
    module="core">SetHandler</directive>, <directive
    module="core">SetInputFilter</directive>, and <directive
    module="core">SetOutputFilter</directive>.  The core directives
    override any filename extension mappings defined in
    <module>mod_mime</module>.</p>

    <p>Note that changing the meta-information for a file does not
    change the value of the <code>Last-Modified</code> header.
    Thus, previously cached copies may still be used by a client or
    proxy, with the previous headers. If you change the
    meta-information (language, content type, character set or
    encoding) you may need to 'touch' affected files (updating
    their last modified date) to ensure that all visitors are
    receive the corrected content headers.</p>
</summary>

    <seealso><directive
    module="mod_mime_magic">MimeMagicFile</directive></seealso>
<seealso><directive module="core">AddDefaultCharset</directive></seealso>
<seealso><directive module="core">ForceType</directive></seealso>
<seealso><directive module="core">DefaultType</directive></seealso>
<seealso><directive module="core">SetHandler</directive></seealso>
<seealso><directive module="core">SetInputFilter</directive></seealso>
<seealso><directive module="core">SetOutputFilter</directive></seealso>


<section id="multipleext">
<title>Files with Multiple Extensions</title>

    <p>Files can have more than one extension, and the order of the
    extensions is <em>normally</em> irrelevant. For example, if the
    file <code>welcome.html.fr</code> maps onto content type
    text/html and language French then the file <code>welcome.fr.html</code> 
    will map onto exactly the same information.  If more than one 
    extension is given which maps onto the same
    type of meta-information, then the one to the right will be
    used. For example, if ".gif" maps to the MIME-type image/gif
    and ".html" maps to the MIME-type text/html, then the file
    <code>welcome.gif.html</code> will be associated with the
    MIME-type "text/html".</p>

    <p>Care should be taken when a file with multiple extensions
    gets associated with both a MIME-type and a handler. This will
    usually result in the request being by the module associated
    with the handler. For example, if the <code>.imap</code>
    extension is mapped to the handler "imap-file" (from mod_imap)
    and the <code>.html</code> extension is mapped to the MIME-type
    "text/html", then the file <code>world.imap.html</code> will be
    associated with both the "imap-file" handler and "text/html"
    MIME-type. When it is processed, the "imap-file" handler will
    be used, and so it will be treated as a mod_imap imagemap
    file.</p>
</section>

<section id="contentencoding"><title>Content encoding</title>

    <p>A file of a particular MIME type can additionally be encoded a
    particular way to simplify transmission over the Internet.
    While this usually will refer to compression, such as
    <code>gzip</code>, it can also refer to encryption, such a
    <code>pgp</code> or to an encoding such as UUencoding, which is
    designed for transmitting a binary file in an ASCII (text)
    format.</p>

    <p>The MIME RFC puts it this way:</p>

    <note>
      The Content-Encoding entity-header field is used as a
      modifier to the media-type. When present, its value indicates
      what additional content coding has been applied to the
      resource, and thus what decoding mechanism must be applied in
      order to obtain the media-type referenced by the Content-Type
      header field. The Content-Encoding is primarily used to allow
      a document to be compressed without losing the identity of
      its underlying media type.
    </note>

    <p>By using more than one file extension (see <a
    href="#multipleext">section above about multiple file
    extensions</a>), you can indicate that a file is of a
    particular <em>type</em>, and also has a particular
    <em>encoding</em>. </p>

    <p>For example, you may have a file which is a Microsoft Word
    document, which is pkzipped to reduce its size. If the
    <code>.doc</code> extension is associated with the Microsoft
    Word file type, and the <code>.zip</code> extension is
    associated with the pkzip file encoding, then the file
    <code>Resume.doc.zip</code>would be known to be a pkzip'ed Word
    document.</p>

    <p>Apache send a <code>Content-encoding</code> header with the
    resource, in order to tell the client browser about the
    encoding method.</p>

    <example>Content-encoding: pkzip</example>

</section>

<section>

<title>Character sets and languages</title>

    <p>In addition to file type and the file encoding,
    another important piece of information is what language a
    particular document is in, and in what character set the file
    should be displayed. For example, the document might be written
    in the Vietnamese alphabet, or in Cyrillic, and should be
    displayed as such. This information, also, is transmitted in
    HTTP headers.</p>

    <p>The character set, language, encoding and mime type are all 
    used in the process of content negotiation (See 
    <module>mod_negotiation</module>) to determine
    which document to give to the client, when there are
    alternative documents in more than one character set, language, 
    encoding or mime type.  All filename extensions associations
    created with <module>AddCharset</module>, <module>AddEncoding</module>, 
    <module>AddLanguage</module> and <module>AddType</module> directives
    (and extensions listed in the <module>MimeMagicFile</module>)
    participate in this select process.  Filename extensions that
    are only associated using the <module>AddHandler</module>,
    <module>AddInputFilter</module> or <module>AddOutputFilter</module>
    directives may be included or excluded from matching by using 
    the <directive>MultiviewsMatch</directive> directive.</p>

<section>
<title>Charset</title>

    <p>To convey this further information, Apache optionally sends
    a <code>Content-Language</code> header, to specify the language
    that the document is in, and can append additional information
    onto the <code>Content-Type</code> header to indicate the
    particular character set that should be used to correctly
    render the information.</p>

<example>
Content-Language: en, fr<br />
Content-Type: text/plain; charset=ISO-8859-2
</example>

    <p>The language specification is the two-letter abbreviation
    for the language. The <code>charset</code> is the name of the
    particular character set which should be used.</p>
</section>
</section>


<directivesynopsis>
<name>AddCharset</name>
<description>Maps the given filename extensions
    to the specified content charset</description>
<syntax>AddCharset <em>charset extension</em> 
[<em>extension</em>] ...</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>
<compatibility>AddCharset is only available in Apache 
1.3.10 and later</compatibility>

<usage>
    
    <p>The AddCharset directive maps the given filename extensions
    to the specified content charset. <em>charset</em> is the MIME
    charset parameter of filenames containing <em>extension</em>.
    This mapping is added to any already in force, overriding any
    mappings that already exist for the same <em>extension</em>.</p>

    <p>Example:</p>
<example>
    AddLanguage ja .ja<br />
    AddCharset EUC-JP .euc<br />
    AddCharset ISO-2022-JP .jis<br />
    AddCharset SHIFT_JIS .sjis
</example>

    <p>Then the document <code>xxxx.ja.jis</code> will be treated
    as being a Japanese document whose charset is ISO-2022-JP (as
    will the document <code>xxxx.jis.ja</code>). The AddCharset
    directive is useful for both to inform the client about the
    character encoding of the document so that the document can be
    interpreted and displayed appropriately, and for <a
    href="../content-negotiation.html">content negotiation</a>,
    where the server returns one from several documents based on
    the client's charset preference.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
<seealso><module>mod_negotiation</module></seealso>
<seealso><directive module="core">AddDefaultCharset</directive></seealso>

</directivesynopsis>

<directivesynopsis>
<name>AddEncoding</name>
<description>Maps the given filename extensions
    to the specified encoding type</description>
<syntax>AddEncoding
    <em>MIME-enc extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>


<usage>

    <p>The AddEncoding directive maps the given filename extensions
    to the specified encoding type. <em>MIME-enc</em> is the MIME
    encoding to use for documents containing the
    <em>extension</em>. This mapping is added to any already in
    force, overriding any mappings that already exist for the same
    <em>extension</em>. Example:</p>

    <example>
      AddEncoding x-gzip .gz<br />
      AddEncoding x-compress .Z
    </example>

    <p>This will cause filenames containing the .gz extension to be
    marked as encoded using the x-gzip encoding, and filenames
    containing the .Z extension to be marked as encoded with
    x-compress. </p>

    <p>Old clients expect <code>x-gzip</code> and
    <code>x-compress</code>, however the standard dictates that
    they're equivalent to <code>gzip</code> and
    <code>compress</code> respectively. Apache does content
    encoding comparisons by ignoring any leading <code>x-</code>.
    When responding with an encoding Apache will use whatever form
    (<em>i.e.</em>, <code>x-foo</code> or <code>foo</code>) the
    client requested. If the client didn't specifically request a
    particular form Apache will use the form given by the
    <code>AddEncoding</code> directive. To make this long story
    short, you should always use <code>x-gzip</code> and
    <code>x-compress</code> for these two specific encodings. More
    recent encodings, such as <code>deflate</code> should be
    specified without the <code>x-</code>.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>AddHandler</name>
<description>Maps the filename extensions
to the specified handler</description>
<syntax>AddHandler
    <em>handler-name extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>

<usage>
<p>Files having the name <em>extension</em> will be served by the
specified <a href="../handler.html">handler-name</a>.  This mapping is
added to any already in force, overriding any mappings that already
exist for the same <em>extension</em>. For example, to activate CGI
scripts with the file extension "<code>.cgi</code>", you might
use:</p>

<example>
    AddHandler cgi-script .cgi
</example>

    <p>Once that has been put into your srm.conf or httpd.conf
    file, any file containing the "<code>.cgi</code>" extension
    will be treated as a CGI program.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
<seealso><directive module="core">SetHandler</directive></seealso>
</directivesynopsis>

<directivesynopsis>
<name>AddInputFilter</name>
<description>Maps filename extensions
    to the filters that will process
    client requests</description>
<syntax>AddInputFilter
    <em>filter</em>[<em>;filter</em>...] extension
    [<em>extension</em> ...]</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>AddInputFilter
    is only available in Apache 2.0.26 and later.</compatibility>

<usage>

    <p>AddInputFilter maps the filename extensions <em>extension</em>
    to the <a href="../filter.html">filters</a> which will process
    client requests and POST input when they are received by the
    server. This is in addition to any filters defined elsewhere,
    including the <a
    href="core.html#setinputfilter">SetInputFilter</a> directive.
    This mapping is merged over any already in force, overriding any
    mappings that already exist for the same <em>extension</em>.</p>

    <p>If more than one filter is specified, they must be separated
    by semicolons in the order in which they should process the
    content. Both the filter and <em>extension</em> arguments are
    case-insensitive, and the extension may be specified with or
    without a leading dot.</p>

</usage>

</directivesynopsis>


<directivesynopsis>
<name>AddLanguage</name>
<description>Maps the given filename extension
to the specified content language</description>
<syntax>AddLanguage
    <em>MIME-lang extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>

<usage>

    <p>The AddLanguage directive maps the given filename extension
    to the specified content language. <em>MIME-lang</em> is the
    MIME language of filenames containing <em>extension</em>. This
    mapping is added to any already in force, overriding any
    mappings that already exist for the same
    <em>extension</em>.</p>

    <p>Example:</p>

    <example>
      AddEncoding x-compress .Z<br />
       AddLanguage en .en<br />
       AddLanguage fr .fr
    </example>

    <p>Then the document <code>xxxx.en.Z</code> will be treated as
    being a compressed English document (as will the document
    <code>xxxx.Z.en</code>). Although the content language is
    reported to the client, the browser is unlikely to use this
    information. The AddLanguage directive is more useful for <a
    href="../content-negotiation.html">content negotiation</a>,
    where the server returns one from several documents based on
    the client's language preference.</p>

    <p>If multiple language assignments are made for the same
    extension, the last one encountered is the one that is used.
    That is, for the case of:</p>

<example>
    AddLanguage en .en<br />
    AddLanguage en-uk .en<br />
    AddLanguage en-us .en
</example>

    <p>documents with the extension "<code>.en</code>" would be
    treated as being "<code>en-us</code>".</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
<seealso><module>mod_negotiation</module></seealso>
</directivesynopsis>

<directivesynopsis>
<name>AddOutputFilter</name>
<description>Maps filename
extensions to the filters that will process
responses from the server</description>
<syntax>AddOutputFilter
    <em>filter</em>[<em>;filter</em>...] extension
    [<em>extension</em> ...]</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override></override>
<compatibility>AddOutputFilter
    is only available in Apache 2.0.26 and later.</compatibility>

<usage>

    <p>The <directive>AddOutputFilter</directive> directive maps the
    filename extensions <em>extension</em> to the <a
    href="../filter.html">filters</a> which will process responses
    from the server before they are sent to the client.  This is in
    addition to any filters defined elsewhere, including the
    <directive module="core">SetOutputFilter</directive>
    directive. This mapping is merged over any already in force,
    overriding any mappings that already exist for the same
    <em>extension</em>.</p>

    <p>For example, the following configuration will process all
    .shtml files for server-side includes and will then compress
    the output using <module>mod_deflate</module>.</p>
     

    <example>
      AddOutputFilter INCLUDES;DEFLATE shtml
    </example>

    <p>If more than one filter is specified, they must be separated
    by semicolons in the order in which they should process the
    content. Both the filter and <em>extension</em> arguments are
    case-insensitive, and the extension may be specified with or
    without a leading dot.</p>

</usage>

<seealso><directive module="mod_mime">RemoveOutputFilter</directive></seealso>
</directivesynopsis>

<directivesynopsis>
<name>AddType</name>
<description>Maps the given filename extensions
onto the specified content type</description>
<syntax>AddType <em>MIME-type
    extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>

<usage>

    <p>The AddType directive maps the given filename extensions onto
    the specified content type. <em>MIME-type</em> is the MIME type to
    use for filenames containing <em>extension</em>. This mapping is
    added to any already in force, overriding any mappings that
    already exist for the same <em>extension</em>.  This directive can
    be used to add mappings not listed in the MIME types file (see the
    <directive module="mod_mime">TypesConfig</directive>
    directive).</p>
    
    <p>Example:</p>

    <example>
      AddType image/gif .gif
    </example>

    <note>It is recommended that new MIME types be added using the
    AddType directive rather than changing the 
    <directive>TypesConfig</directive> file. </note>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
<seealso><directive module="core">DefaultType</directive></seealso>
<seealso><directive module="core">ForceType</directive></seealso>
</directivesynopsis>

<directivesynopsis>
<name>MultiviewsMatch</name>
<description>The types of files that will be included when 
searching for a matching file with MultiViews</description>
<syntax>MultiviewsMatch
    <em>[NegotiatedOnly] [Handlers] [Filters] [Any]</em></syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>
<compatibility>Available 
    in Apache 2.0.26 and later.</compatibility>

<usage>

    <p>MultiviewsMatch permits three different behaviors for
    <a href="mod_negotiation.html">mod_negotiation</a>'s Multiviews 
    feature.  Multiviews allows a request for a file, e.g. index.html,
    to match any negotiated extensions following the base request,
    e.g. index.html.en, index.html.fr, or index.html.gz.</p>

    <p>The NegotiatedOnly option provides that every extension following
    the base name must correlate to a recognized mod_mime extension for
    content negotation, e.g. Charset, Content-Type, Language, or 
    Encoding.  This is the strictest implementation with the fewest
    unexpected side effects, and is the default behavior.</p>

    <p>To include extensions associated with Handlers and/or Filters,
    set the MultiviewsMatch directive to either Handlers, Filters, or
    both option keywords.  If all other factors are equal, the smallest
    file will be served, e.g. in deciding between index.html.cgi of 500
    characters and index.html.pl of 1000 bytes, the .cgi file would win
    in this example.  Users of .asis files might prefer to use the
    Handler option, if .asis files are associated with the asis-handler.</p>

    <p>You may finally allow Any extensions to match, even if mod_mime 
    doesn't recognize the extension.  This was the behavior in Apache 1.3,
    and can cause unpredicatable results, such as serving .old or .bak
    files the webmaster never expected to be served.</p>

    <p>For example, the following configuration will allow handlers
    and filters to participate in Multviews, but will exclude unknown
    files:</p>
<example>
MultiviewsMatch Handlers Filters
</example>

</usage>
<seealso><directive module="core">Options</directive></seealso>
</directivesynopsis>

<directivesynopsis>
<name>DefaultLanguage</name>
<description>Sets all files in the given scope to the 
specified language</description>
<syntax>DefaultLanguage
    <em>MIME-lang</em></syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>
<compatibility>DefaultLanguage
    is only available in Apache 1.3.4 and later.</compatibility>

<usage>

    <p>The DefaultLanguage directive tells Apache that all files in
    the directive's scope (<em>e.g.</em>, all files covered by the
    current <code>&lt;Directory&gt;</code> container) that don't
    have an explicit language extension (such as <code>.fr</code>
    or <code>.de</code> as configured by <code>AddLanguage</code>)
    should be considered to be in the specified <em>MIME-lang</em>
    language. This allows entire directories to be marked as
    containing Dutch content, for instance, without having to
    rename each file. Note that unlike using extensions to specify
    languages, <code>DefaultLanguage</code> can only specify a
    single language.</p>

    <p>If no <code>DefaultLanguage</code> directive is in force,
    and a file does not have any language extensions as configured
    by <code>AddLanguage</code>, then that file will be considered
    to have no language attribute.</p>

<example><title>Example</title>
DefaultLanguage en
</example>

</usage>
<seealso><module>mod_negotiation</module></seealso>
</directivesynopsis>

<directivesynopsis>
<name>ModMimeUsePathInfo</name>
<description>Tells mod_mime to treat path_info components as part of the filename</description>
<syntax>ModMimeUsePathInfo On|Off</syntax>
<contextlist>
<context>server config</context>
<context>virtual host</context>
<context>directory</context>
<context>location</context>
<context>.htaccess</context>
</contextlist>
<override>FileInfo</override>
<compatibility>Available in Apache 2.0.41 and later</compatibility>

<usage>

  <p>The ModMimeUsePathInfo directive is used to combine the filename with
     the path_info URL component to apply mod_mime's directives to the
     request.  The default value is 'Off' - therefore, the path_info
     component is ignored.
  </p>

  <p>This directive is recommended when you have a virtual filesystem.</p>

<example>
<title>Example</title>
ModMimeUsePathInfo On
</example>

  <p>If you have a request for /bar/foo.shtml where /bar is a Location and
     ModMimeUsePathInfo is on, mod_mime will treat the incoming request as
     /bar/foo.shtml and directives like
     <code>AddOutputFilter INCLUDES .shtml</code> will add the INCLUDES
     filter to the request.  If ModMimeUsePathInfo is not set, the includes
     filter will not be added.
  </p>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>RemoveCharset</name>
<description>Removes any character set associations for a set of file
extensions</description>
<syntax>RemoveCharset
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>RemoveCharset is
    only available in Apache 2.0.24 and later.</compatibility>

<usage>
    <p>The <code>RemoveCharset</code> directive removes any
    character set associations for files with the given extensions.
    This allows <code>.htaccess</code> files in subdirectories to
    undo any associations inherited from parent directories or the
    server config files.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

<example><title>Example</title>
RemoveCharset .html .shtml
</example>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>RemoveEncoding</name>
<description>Removes any content encoding associations for a set of file
extensions</description>
<syntax>RemoveEncoding
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>RemoveEncoding
    is only available in Apache 1.3.13 and later.</compatibility>

<usage>

    <p>The <code>RemoveEncoding</code> directive removes any
    encoding associations for files with the given extensions. This
    allows <code>.htaccess</code> files in subdirectories to undo
    any associations inherited from parent directories or the
    server config files. An example of its use might be:</p>


<example><title>/foo/.htaccess:</title>
<pre>
AddEncoding x-gzip .gz
AddType text/plain .asc
&lt;Files *.gz.asc&gt;
  RemoveEncoding .gz
&lt;/Files&gt;
</pre></example>

    <p>This will cause <code>foo.gz</code> to be marked as being
    encoded with the gzip method, but <code>foo.gz.asc</code> as an
    unencoded plaintext file.</p>

    <p><strong>Note:</strong>RemoveEncoding directives are processed
    <em>after</em> any AddEncoding directives, so it is possible they
    may undo the effects of the latter if both occur within the
    same directory configuration.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>RemoveHandler</name>
<description>Removes any handler associations for a set of file
extensions</description>
<syntax>RemoveHandler
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>RemoveHandler is
    only available in Apache 1.3.4 and later.</compatibility>

<usage>

    <p>The <code>RemoveHandler</code> directive removes any handler
    associations for files with the given extensions. This allows
    <code>.htaccess</code> files in subdirectories to undo any
    associations inherited from parent directories or the server
    config files. An example of its use might be:</p>

<example><title>/foo/.htaccess:</title>
AddHandler server-parsed .html
</example>

<example><title>/foo/bar/.htaccess:</title>
RemoveHandler .html
</example>

    <p>This has the effect of returning <code>.html</code> files in
    the <code>/foo/bar</code> directory to being treated as normal
    files, rather than as candidates for parsing (see the <a
    href="mod_include.html"><code>mod_include</code></a>
    module).</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>RemoveInputFilter</name>
<description>Removes any input filter associations for a set of file
extensions</description>
<syntax>RemoveInputFilter
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>RemoveInputFilter is only available in Apache 
2.0.26 and later.</compatibility>

<usage>   

    <p>The <code>RemoveInputFilter</code> directive removes any
    input filter associations for files with the given extensions.
    This allows <code>.htaccess</code> files in subdirectories to
    undo any associations inherited from parent directories or the
    server config files.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>RemoveLanguage</name>
<description>Removes any language associations for a set of file
extensions</description>
<syntax>RemoveLanguage
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<compatibility>RemoveLanguage
    is only available in Apache 2.0.24 and later.</compatibility>


<usage>

    <p>The <code>RemoveLanguage</code> directive removes any
    language associations for files with the given extensions. This
    allows <code>.htaccess</code> files in subdirectories to undo
    any associations inherited from parent directories or the
    server config files.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>RemoveOutputFilter</name>
<description>Removes any output filter associations for a set of file
extensions</description>
<syntax>RemoveOutputFilter
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override></override>
<compatibility>RemoveOutputFilter is only available in Apache 
2.0.26 and later.</compatibility>

<usage>    

    <p>The <code>RemoveOutputFilter</code> directive removes any
    output filter associations for files with the given extensions.
    This allows <code>.htaccess</code> files in subdirectories to
    undo any associations inherited from parent directories or the
    server config files.</p>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>

    <example><title>Example</title>
    RemoveOutputFilter shtml
    </example>
</usage>

<seealso><directive module="mod_mime">AddOutputFilter</directive></seealso>
</directivesynopsis>


<directivesynopsis>
<name>RemoveType</name>
<description>Removes any content type associations for a set of file
extensions</description>
<syntax>RemoveType
    <em>extension</em> [<em>extension</em>] ...</syntax>
<contextlist>
<context>virtual host</context>
<context>directory</context>
<context>.htaccess</context>
</contextlist>
<override></override>
<compatibility>RemoveType is
    only available in Apache 1.3.13 and later.</compatibility>

<usage>
    <p>The <directive>RemoveType</directive> directive removes any MIME type
    associations for files with the given extensions. This allows
    <code>.htaccess</code> files in subdirectories to undo any
    associations inherited from parent directories or the server
    config files. An example of its use might be:</p>

<example><title>/foo/.htaccess:</title>
RemoveType .cgi
</example>

    <p>This will remove any special handling of <code>.cgi</code>
    files in the <code>/foo/</code> directory and any beneath it,
    causing the files to be treated as being of the <a
    href="core.html#defaulttype">default type</a>.</p>

    <note><strong>Note:</strong><directive>RemoveType</directive> directives
    are processed <em>after</em> any <directive>AddType</directive>
    directives, so it is possible they may undo the effects of the
    latter if both occur within the same directory
    configuration.</note>

    <p>The <em>extension</em> argument is case-insensitive, and can
    be specified with or without a leading dot.</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>TypesConfig</name>
<description>The location of the mime.types file</description>
<syntax>TypesConfig <em>file-path</em></syntax>
<default>TypesConfig conf/mime.types</default>
<contextlist>
<context>server config</context>
</contextlist>

<usage>

    <p>The TypesConfig directive sets the location of the MIME types
    configuration file. <em>Filename</em> is relative to the <a
    href="core.html#serverroot">ServerRoot</a>. This file sets the
    default list of mappings from filename extensions to content
    types. Most administrators use the provided
    <code>mime.types</code> file, which associates common filename
    extensions with IANA registered content types. The current list is
    maintained at
    <code>http://www.isi.edu/in-notes/iana/assignments/media-types/media-types</code>. This
    simplifies the <code>httpd.conf</code> file by providing the
    majority of media-type definitions, and may be overridden by
    <directive module="mod_mime">AddType</directive> directives as
    needed.  You should not edit the <code>mime.types</code> file,
    because it may be replaced when you upgrade your server.</p>
   
    <p>The file contains lines in the format of the arguments to
    an <directive module="mod_mime">AddType</directive> directive:</p>

    <example>
      MIME-type extension extension ...
    </example>

    <p>
    The case of the extension does not matter. Blank lines, and lines
    beginning with a hash character (`#') are ignored. </p>

    <note>Please do not send requests to the Apache HTTP Server Project
    to add any new entries in the distributed mime.types file
    unless (1) they are already registered with IANA, and (2) they
    use widely accepted, non-conflicting filename extensions across
    platforms. category/x-subtype requests will be automatically
    rejected, as will any new two-letter extensions as they will
    likely conflict later with the already crowded language and
    character set namespace.</note>

</usage>
<seealso><module>mod_mime_magic</module></seealso>
</directivesynopsis>
</modulesynopsis>

